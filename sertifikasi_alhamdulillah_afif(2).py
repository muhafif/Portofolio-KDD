# -*- coding: utf-8 -*-
"""SERTIFIKASI ALHAMDULILLAH AFIF

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QeHZliyvw-ftv7xDHNdedt7bwxDuZ145
"""

# Mengimpor librari Python
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

# Membaca data dari Google Drive. Note: Disesuaikan dengan direktori yang digunakan
dataset = pd.read_csv('/content/drive/MyDrive/SERTIFIKASI/Bank_Churn_Modelling.csv')

# Menampilkan variabel dan ukuran data
def display_df(df):
      display(df.head())
      print(df.shape)
display_df(dataset)

dataset.info()

dataset.describe()

# Mengecek nilai duplikat
duplicate_rows = dataset[dataset.duplicated()]
print('Jumlah data duplikat =', len(duplicate_rows))

import seaborn as sns
import matplotlib.pyplot as plt

# Memeriksa nilai unik pada kolom 'Geography'
unique_values = dataset['Gender'].unique()
print(unique_values)

# Analisis Distribusi Kategori
sns.set(style="darkgrid")
ax = sns.countplot(x='Gender', data=dataset)

# Menambahkan label pada batang plot
for label in ax.containers:
    ax.bar_label(label)

plt.title('Distribusi Data Berdasarkan Gender')
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Memeriksa nilai unik pada kolom 'Geography'
unique_values = dataset['Geography'].unique()
print(unique_values)

# Analisis Distribusi Kategori
sns.set(style="darkgrid")
ax = sns.countplot(x='Geography', data=dataset)

# Menambahkan label pada batang plot
for label in ax.containers:
    ax.bar_label(label)

plt.title('Distribusi Data Berdasarkan Geography')
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Memeriksa nilai unik pada kolom 'Geography'
unique_values = dataset['Tenure'].unique()
print(unique_values)

# Analisis Distribusi Kategori
sns.set(style="darkgrid")
ax = sns.countplot(x='Tenure', data=dataset)

# Menambahkan label pada batang plot
for label in ax.containers:
    ax.bar_label(label)

plt.title('Distribusi Data Berdasarkan Tenure')
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Memeriksa nilai unik pada kolom 'Geography'
unique_values = dataset['NumOfProducts'].unique()
print(unique_values)

# Analisis Distribusi Kategori
sns.set(style="darkgrid")
ax = sns.countplot(x='NumOfProducts', data=dataset)

# Menambahkan label pada batang plot
for label in ax.containers:
    ax.bar_label(label)

plt.title('Distribusi Data Berdasarkan NumOfProdcuts')
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Memeriksa nilai unik pada kolom 'Geography'
unique_values = dataset['HasCrCard'].unique()
print(unique_values)

# Analisis Distribusi Kategori
sns.set(style="darkgrid")
ax = sns.countplot(x='HasCrCard', data=dataset)

# Menambahkan label pada batang plot
for label in ax.containers:
    ax.bar_label(label)

plt.title('Distribusi Data Berdasarkan HasCrCard')
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Memeriksa nilai unik pada kolom 'Geography'
unique_values = dataset['IsActiveMember'].unique()
print(unique_values)

# Analisis Distribusi Kategori
sns.set(style="darkgrid")
ax = sns.countplot(x='IsActiveMember', data=dataset)

# Menambahkan label pada batang plot
for label in ax.containers:
    ax.bar_label(label)

plt.title('Distribusi Data Berdasarkan IsActiveMember')
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Memeriksa nilai unik pada kolom 'Geography'
unique_values = dataset['Exited'].unique()
print(unique_values)

# Analisis Distribusi Kategori
sns.set(style="darkgrid")
ax = sns.countplot(x='Exited', data=dataset)

# Menambahkan label pada batang plot
for label in ax.containers:
    ax.bar_label(label)

plt.title('Distribusi Data Berdasarkan Exited')
plt.show()

from matplotlib import pyplot as plt
plt.hist(dataset['Age'], bins=50, color='skyblue', edgecolor='black')

# Memberikan Label dan Judul Histogram
plt.xlabel('Umur Customer')
plt.ylabel('Jumlah Customer')
plt.title('Distribusi Umur Customer')
plt.show()

from matplotlib import pyplot as plt
plt.hist(dataset['CreditScore'], bins=50, color='skyblue', edgecolor='black')

# Memberikan Label dan Judul Histogram
plt.xlabel('Creditscore')
plt.ylabel('Jumlah CreditCustomer')
plt.title('Distribusi CreditCustomer')
plt.show()

from matplotlib import pyplot as plt
plt.hist(dataset['EstimatedSalary'], bins=50, color='skyblue', edgecolor='black')

# Memberikan Label dan Judul Histogram
plt.xlabel('EstimatedSalary')
plt.ylabel('Jumlah EstimatedSalary')
plt.title('Distribusi EstimatedSalary')
plt.show()

dataset.isna().sum()

# pembersihan data
mode_Age=dataset['Gender'].mode()[0]
dataset['Gender'].fillna(mode_Age, inplace=True)

# pembersihan data
mode_Age=dataset['Age'].mode()[0]
dataset['Age'].fillna(mode_Age, inplace=True)

dataset.isna().sum()

dataset.drop(columns=['Surname'], inplace=True)

from sklearn.preprocessing import LabelEncoder

# Inisialisasi LabelEncoder
le = LabelEncoder()

# List of column names with 'object' data type, excluding 'Surname'
object_columns = [col for col in dataset.select_dtypes(include=['object']).columns if col != 'Surname']

# Label encoding untuk kolom-kolom tersebut
for col in object_columns:
    dataset[col] = le.fit_transform(dataset[col])

# Tampilkan informasi tentang DataFrame yang telah diperbarui
dataset.info()

dataset["Age"].plot(kind='box', figsize=(3, 4))

# Menghitung IQR
Q1 = dataset['Age'].quantile(0.25)
Q3 = dataset['Age'].quantile(0.75)
IQR = Q3 - Q1

# Menentukan batas untuk data pencilan
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Mengidentifikasi data pencilan
outliers = dataset[(dataset['Age'] < lower_bound) | (dataset['Age'] > upper_bound)]

# Menghapus data pencilan
dataset_no_outliers = dataset[(dataset['Age'] >= lower_bound) & (dataset['Age'] <= upper_bound)]
dataset = dataset_no_outliers

dataset["Age"].plot(kind='box', figsize=(3, 4))

# Menghitung IQR
Q1 = dataset['NumOfProducts'].quantile(0.25)
Q3 = dataset['NumOfProducts'].quantile(0.75)
IQR = Q3 - Q1

# Menentukan batas untuk data pencilan
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Mengidentifikasi data pencilan
outliers = dataset[(dataset['NumOfProducts'] < lower_bound) | (dataset['NumOfProducts'] > upper_bound)]

# Menghapus data pencilan
dataset_no_outliers = dataset[(dataset['NumOfProducts'] >= lower_bound) & (dataset['NumOfProducts'] <= upper_bound)]
dataset = dataset_no_outliers

dataset["NumOfProducts"].plot(kind='box', figsize=(3, 4))

# Menghitung IQR
Q1 = dataset['CreditScore'].quantile(0.25)
Q3 = dataset['CreditScore'].quantile(0.75)
IQR = Q3 - Q1

# Menentukan batas untuk data pencilan
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Mengidentifikasi data pencilan
outliers = dataset[(dataset['CreditScore'] < lower_bound) | (dataset['CreditScore'] > upper_bound)]

# Menghapus data pencilan
dataset_no_outliers = dataset[(dataset['CreditScore'] >= lower_bound) & (dataset['CreditScore'] <= upper_bound)]
dataset = dataset_no_outliers

dataset["CreditScore"].plot(kind='box', figsize=(3, 4))

import seaborn as sns
import matplotlib.pyplot as plt

# Memeriksa nilai unik pada kolom 'Geography'
unique_values = dataset['Exited'].unique()
print(unique_values)

# Analisis Distribusi Kategori
sns.set(style="darkgrid")
ax = sns.countplot(x='Exited', data=dataset)

# Menambahkan label pada batang plot
for label in ax.containers:
    ax.bar_label(label)

plt.title('Distribusi Data Berdasarkan Exited')
plt.show()

from imblearn.over_sampling import SMOTE
from collections import Counter
import matplotlib.pyplot as plt

# Memisahkan fitur (X) dan target (y)
X = dataset.drop('Exited', axis=1)
y = dataset['Exited']

# Inisialisasi SMOTE
smote = SMOTE(random_state=42)

# Melakukan oversampling dengan SMOTE
X_resampled, y_resampled = smote.fit_resample(X, y)

# Menampilkan distribusi kelas setelah oversampling
print("Distribusi Kelas Setelah Oversampling:", Counter(y_resampled))

# Mengatur data untuk diagram batang
labels_after_oversampling = ['1', '0']
values_after_oversampling = [Counter(y_resampled)[0], Counter(y_resampled)[1]]

# Membuat diagram batang
fig, (ax1) = plt.subplots(1, 1, figsize=(10, 5))

# Diagram batang setelah oversampling
ax1.bar(labels_after_oversampling, values_after_oversampling, color=['blue', 'red'])
ax1.set_title('Distribusi Kelas Setelah Oversampling')
ax1.set_xlabel('Kelas')
ax1.set_ylabel('Jumlah Sampel')

plt.tight_layout()
plt.show()
X_resampled.info()
y_resampled.info()

import seaborn as sns
import matplotlib.pyplot as plt

# Menghasilkan matriks korelasi
correlation_matrix = dataset.corr()

# Menghapus kolom/atribut tertentu dari matriks korelasi
atribut_yang_dihapus = 'RowNumber'
correlation_matrix.drop(atribut_yang_dihapus, axis=0, inplace=True)
correlation_matrix.drop(atribut_yang_dihapus, axis=1, inplace=True)

# Menampilkan heatmap setelah penghapusan atribut
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Matrix Korelasi Setelah Penghapusan')
plt.show()

X_resampled.info()

# Mengimpor library yang diperlukan no 14
import numpy as np
import pandas as pd
from sklearn.metrics import confusion_matrix, accuracy_score, classification_report
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
import matplotlib.pyplot as plt

# Membagi variabel data menjadi variabel dependent dan independent (target)
X_resampled = X_resampled.drop(['CustomerId', 'RowNumber'], axis=1)

# Membagi data input menjadi data training dan data testing
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

from sklearn.metrics import confusion_matrix, classification_report, accuracy_score, precision_score, recall_score, f1_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import GridSearchCV

# Gini Index digunakan sebagai Splitting Criterion
modelDT_gini = DecisionTreeClassifier(criterion="gini", random_state=100, max_depth=3, min_samples_leaf=5)
modelDT_gini.fit(X_train, y_train)
y_pred = modelDT_gini.predict(X_test)

# Confusion Matrix untuk DT
print("Confusion Matrix untuk DT :\n", confusion_matrix(y_test, y_pred), "\n")

# Classification Report untuk DT
print("Classification Report untuk DT :\n ", classification_report(y_test, y_pred, digits=4))

# Menghitung metrik evaluasi
accuracy_dt = accuracy_score(y_test, y_pred)
precision_dt = precision_score(y_test, y_pred)
recall_dt = recall_score(y_test, y_pred)
f1_dt = f1_score(y_test, y_pred)

# Menampilkan hasil evaluasi
print(f'Akurasi  DT : {accuracy_dt:.2%}')
print(f'Presisi  DT : {precision_dt:.2%}')
print(f'Recall   DT : {recall_dt:.2%}')
print(f'F1-Score DT : {f1_dt:.2%}')

!pip install shap
import shap

# Inisialisasi objek TreeExplainer untuk model Decision Tree
explainer_dt = shap.TreeExplainer(modelDT_gini)

# Menghitung SHAP values untuk data uji
shap_values_dt = explainer_dt.shap_values(X_resampled)

# Membuat summary plot dari SHAP values
shap.summary_plot(shap_values_dt, X_resampled, plot_type="bar")

from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix, classification_report


# help(KNeighborsClassifier)

knn_model = KNeighborsClassifier(n_neighbors=5)

# Confusion Matrix untuk DT
print("Confusion Matrix untuk KNN :\n", confusion_matrix(y_test, y_pred), "\n")

# Classification Report untuk DT
print("Classification Report untuk KNN :\n ", classification_report(y_test, y_pred, digits=4))

# Menghitung metrik evaluasi
accuracy_dt = accuracy_score(y_test, y_pred)
precision_dt = precision_score(y_test, y_pred)
recall_dt = recall_score(y_test, y_pred)
f1_knn = f1_score(y_test, y_pred)

# Menampilkan hasil evaluasi
print(f'Akurasi  KNN : {accuracy_dt:.2%}')
print(f'Presisi  KNN : {precision_dt:.2%}')
print(f'Recall   KNN : {recall_dt:.2%}')
print(f'F1-Score KNN : {f1_dt:.2%}')